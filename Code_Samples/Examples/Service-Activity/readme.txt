Android projects are the projects that eventually get built into an .apk file
that you install onto a device. They contain things such as application
source code and resource files.

Some are generated for you by default, while others should be created if
required. The following directories and files comprise an Android project:

src/
    Contains your stub Activity file, which is stored at
    src/your/package/namespace/ActivityName.java All other source code files
    (such as .java or .aidl files) go here as well.
bin/
    Output directory of the build. This is where you can find the final .apk
    file and other compiled resources.
jni/
    Contains native code sources developed using the Android NDK. For more
    information, see the Android NDK documentation.
gen/
    Contains the Java files generated by ADT, such as your R.java file and
    interfaces created from AIDL files.
assets/
    This is empty. You can use it to store raw asset files. Files that you
    save here are compiled into an .apk file as-is, and the original filename
    is preserved. You can navigate this directory in the same way as a
    typical file system using URIs and read files as a stream of bytes using
    the the AssetManager. For example, this is a good location for textures
    and game data.
res/
    Contains application resources, such as drawable files, layout files,
    and string values. See Application Resources for more information.
res/anim/
    For XML files that are compiled into animation objects. See the Animation
    resource type.
res/color/
    For XML files that describe colors. See the Color Values resource type.
res/drawable/
    For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and XML files
    that describe Drawable shapes or a Drawable objects that contain multiple
    states (normal, pressed, or focused). See the Drawable resource type.
res/layout/
    XML files that are compiled into screen layouts (or part of a screen).
    See the Layout resource type.
res/menu/
    For XML files that define application menus. See the Menus resource type.
res/raw/
    For arbitrary raw asset files. Saving asset files here instead of in
    the assets/ directory only differs in the way that you access them. These
    files are processed by aapt and must be referenced from the application
    using a resource identifier in the R class. For example, this is a good
    place for media, such as MP3 or Ogg files.
res/values/
    For XML files that are compiled into many kinds of resource. Unlike other
    resources in the res/ directory, resources written to XML files in this
    folder are not referenced by the file name. Instead, the XML element type
    controls how the resources is defined within them are placed into
    the R class.
res/xml/
    For miscellaneous XML files that configure application components.
    For example, an XML file that defines a androidcreen,
    AppWidgetProviderInfo, or Searchability Metadata. See Application
    Resources for more information about configuring these application
    components.
libs/
    Contains private libraries.
AndroidManifest.xml
    The control file that describes the nature of the application and each
    of its components. For instance, it describes:
    - certain qualities about the activities, services, intent receivers,
      and content providers
    - what permissions are requested; what external libraries are needed
    - what device features are required, what API Levels are supported
      or required
    See the AndroidManifest.xml documentation for more information
project.properties
    This file contains project settings, such as the build target. This file
    is integral to the project, so maintain it in a source revision control
    system. To edit project properties in Eclipse, right-click the project
    folder and select Properties.
local.properties
    Customizable computer-specific properties for the build system. If you
    use Ant to build the project, this contains the path to the SDK
    installation. Because the content of the file is specific to the
    local installation of the SDK, the local.properties should not be
    maintained in a source revision control system. If you use Eclipse,
    this file is not used.
ant.properties
    Customizable properties for the build system. You can edit this file to
    override default build settings used by Ant and also provide the location
    of your keystore and key alias so that the build tools can sign your
    application when building in release mode. This file is integral to
    the project, so maintain it in a source revision control system.
    If you use Eclipse, this file is not used.
build.xml
    The Ant build file for your project. This is only applicable for projects that you build with Ant.package com.ncomputing.vspacemobile.util;

//Platform Imports
import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.Context;

//Application level imports
import com.ncomputing.vspacemobile.services.NCHelperService;

public class NCCommonUtilities {
	

	//Data Members
	public Context mObjContxt;

	//Contructor which takes in the Context of the application 
	public NCCommonUtilities(final Context aObjContext) {
		mObjContxt = aObjContext;
	}


	//Public Methods since we have the class as a utility epect all the 
	//methods to be public not private 
	
    public boolean isMyServiceRunning() {
            ActivityManager manager = 
            (ActivityManager) mObjContxt.getSystemService(Context.ACTIVITY_SERVICE);
            for (RunningServiceInfo service : manager
                            .getRunningServices(Integer.MAX_VALUE)) {
                    if (NCHelperService.class.getName().equals(
                                    service.service.getClassName())) {
                            return true;
                    }
            }
            return false;
    }
}